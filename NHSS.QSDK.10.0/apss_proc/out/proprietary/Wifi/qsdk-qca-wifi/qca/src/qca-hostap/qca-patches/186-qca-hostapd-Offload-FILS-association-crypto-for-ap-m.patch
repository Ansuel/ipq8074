From e625fcdcd5804e8e3028a302c2364f09733b497c Mon Sep 17 00:00:00 2001
From: Subrat Mishra <subratm@qti.qualcomm.com>
Date: Thu, 19 Jul 2018 16:48:28 +0530
Subject: [PATCH] qca-hostapd: Offload FILS association crypto for ap mode
 driver

Add support to offload FILS association request/response frame
encryption/decryption to the driver running in AP mode with nl80211
interface depending on the driver FILS crypto offload extended
capability flag.

This feature is supported on drivers running in AP mode only.
This extended capability is exchanged with hostapd during nl80211 init.
If the driver indicates this capability, then before sending the
response Authentication frame, hostapd sets FILS AAD data to the
driver. This allows the driver to decrypt (Re)Association Request
frame and encrypt (Re)Association Response frame. FILS Key derivation

Change-Id: I68ba93e86177b1a33a96ea3a621f11593dc399bc
Signed-off-by: Subrat Mishra <subratm@qti.qualcomm.com>

diff --git a/src/ap/ap_drv_ops.h b/src/ap/ap_drv_ops.h
index 8b95ac5..a34f098 100644
--- a/src/ap/ap_drv_ops.h
+++ b/src/ap/ap_drv_ops.h
@@ -357,4 +357,20 @@ static inline int hostapd_drv_stop_ap(struct hostapd_data *hapd)
 	return hapd->driver->stop_ap(hapd->drv_priv);
 }
 
+static inline int hostapd_drv_fils_crypto_capable(struct hostapd_data *hapd)
+{
+	if (!hapd->driver ||
+	    !hapd->driver->is_drv_fils_crypto_capable || !hapd->drv_priv)
+		return 0;
+	return hapd->driver->is_drv_fils_crypto_capable(hapd->drv_priv);
+}
+
+static inline int hostapd_set_fils_aad(struct hostapd_data *hapd,
+				       struct wpa_driver_sta_auth_params *param)
+{
+	if (!hapd->driver ||
+	    !hapd->driver->set_fils_aad || !hapd->drv_priv)
+		return -1;
+	return hapd->driver->set_fils_aad(hapd->drv_priv, param);
+}
 #endif /* AP_DRV_OPS */
diff --git a/src/ap/ieee802_11.c b/src/ap/ieee802_11.c
index d9021d3..b5d3de7 100644
--- a/src/ap/ieee802_11.c
+++ b/src/ap/ieee802_11.c
@@ -1529,7 +1529,17 @@ static void handle_auth_fils_finish(struct hostapd_data *hapd,
 				    struct wpabuf *data, int pub)
 {
 	u16 auth_alg;
+	struct wpa_driver_sta_auth_params params;
 
+	if (hostapd_drv_fils_crypto_capable(hapd)) {
+		wpa_auth_get_fils_aead_params(sta->wpa_sm,
+					      params.fils_anonce,
+					      params.fils_snonce,
+					      params.fils_kek,
+					      &params.fils_kek_len);
+		params.addr = sta->addr;
+		hostapd_set_fils_aad(hapd, &params);
+	}
 	auth_alg = (pub ||
 		    resp == WLAN_STATUS_FINITE_CYCLIC_GROUP_NOT_SUPPORTED) ?
 		WLAN_AUTH_FILS_SK_PFS : WLAN_AUTH_FILS_SK;
@@ -2943,15 +2953,26 @@ static u16 send_assoc_resp(struct hostapd_data *hapd, struct sta_info *sta,
 			goto done;
 		}
 
-		/* FILS Session */
-		*p++ = WLAN_EID_EXTENSION; /* Element ID */
-		*p++ = 1 + FILS_SESSION_LEN; /* Length */
-		*p++ = WLAN_EID_EXT_FILS_SESSION; /* Element ID Extension */
-		os_memcpy(p, elems.fils_session, FILS_SESSION_LEN);
-		send_len += 2 + 1 + FILS_SESSION_LEN;
+		if (hostapd_drv_fils_crypto_capable(hapd)) {
+			u8 *buff = p;
 
-		send_len = fils_encrypt_assoc(sta->wpa_sm, buf, send_len,
-					      buflen, sta->fils_hlp_resp);
+			p = hostapd_eid_assoc_fils_session(sta->wpa_sm, p,
+							   elems.fils_session,
+							   sta->fils_hlp_resp);
+			wpa_hexdump(MSG_DEBUG, "FILS Assoc Resp BUF (IEs)",
+				    buff, p - buff);
+			send_len += p - buff;
+		} else {
+			/* FILS Session */
+			*p++ = WLAN_EID_EXTENSION; /* Element ID */
+			*p++ = 1 + FILS_SESSION_LEN; /* Length */
+			*p++ = WLAN_EID_EXT_FILS_SESSION; /* Element ID Extension */
+			os_memcpy(p, elems.fils_session, FILS_SESSION_LEN);
+			send_len += 2 + 1 + FILS_SESSION_LEN;
+			send_len = fils_encrypt_assoc(sta->wpa_sm, buf,
+						      send_len, buflen,
+						      sta->fils_hlp_resp);
+		}
 		if (send_len < 0) {
 			res = WLAN_STATUS_UNSPECIFIED_FAILURE;
 			goto done;
@@ -3294,23 +3315,47 @@ static void handle_assoc(struct hostapd_data *hapd,
 	    sta->auth_alg == WLAN_AUTH_FILS_PK) {
 		int res;
 
-		/* The end of the payload is encrypted. Need to decrypt it
-		 * before parsing. */
+		if (hostapd_drv_fils_crypto_capable(hapd)) {
+			const u8* ses;
 
-		tmp = os_memdup(pos, left);
-		if (!tmp) {
-			resp = WLAN_STATUS_UNSPECIFIED_FAILURE;
-			goto fail;
-		}
+			ses = wpa_fils_validate_fils_session(sta->wpa_sm, pos,
+							     left,
+							     sta->fils_session);
+			if (!ses) {
+				wpa_printf(MSG_DEBUG,
+					   "FILS: Session validation failed");
+				resp = WLAN_STATUS_UNSPECIFIED_FAILURE;
+				goto fail;
+			}
 
-		res = fils_decrypt_assoc(sta->wpa_sm, sta->fils_session, mgmt,
-					 len, tmp, left);
-		if (res < 0) {
-			resp = WLAN_STATUS_UNSPECIFIED_FAILURE;
-			goto fail;
+			res = wpa_fils_validate_key_confirm(sta->wpa_sm, pos,
+							    left);
+			if (res < 0) {
+				wpa_printf(MSG_DEBUG,
+					   "FILS: Key validation failed");
+				resp = WLAN_STATUS_UNSPECIFIED_FAILURE;
+				goto fail;
+			}
+		} else {
+			/* The end of the payload is encrypted. Need to decrypt
+			 * it before parsing. */
+
+			tmp = os_memdup(pos, left);
+			if (!tmp) {
+				resp = WLAN_STATUS_UNSPECIFIED_FAILURE;
+				goto fail;
+			}
+
+			res = fils_decrypt_assoc(sta->wpa_sm, sta->fils_session, mgmt,
+						 len, tmp, left);
+			if (res < 0) {
+				resp = WLAN_STATUS_UNSPECIFIED_FAILURE;
+				goto fail;
+			}
+
+			pos = tmp;
+			left = res;
 		}
-		pos = tmp;
-		left = res;
 	}
 #endif /* CONFIG_FILS */
 
diff --git a/src/drivers/driver.h b/src/drivers/driver.h
index eef08cc..ff2214f 100644
--- a/src/drivers/driver.h
+++ b/src/drivers/driver.h
@@ -1565,6 +1565,14 @@ struct wpa_driver_capa {
  * functionality but can support only OCE STA-CFON functionality.
  */
 #define WPA_DRIVER_FLAGS_OCE_STA_CFON		0x0020000000000000ULL
+/**
+ * Driver support FILS Encryption/Decryption of (Re)Association frames.
+ * This flag is to indicate hostapd to share the FILS AAD details with
+ * the Driver just before sending Auth response so that driver
+ * can perform encryption/decryption of (Re)Association frames.
+ * And hostapd has to skip this encap/decap if this bit is set.
+ */
+#define WPA_DRIVER_FLAGS_FILS_CRYPTO_OFFLOAD    0x0080000000000000ULL
 	u64 flags;
 
 #define FULL_AP_CLIENT_STATE_SUPP(drv_flags) \
@@ -4075,6 +4083,28 @@ struct wpa_driver_ops {
 	 */
 	int (*send_external_auth_status)(void *priv,
 					 struct external_auth *params);
+
+	/**
+	 * is_drv_fils_crypto_capable - Check driver is fils crypto capable
+	 * @priv: Private driver interface data
+	 * Returns: 1 if capable, 0 if not capable
+	 *
+	 * Check the underlying driver is capable to perform (Re-)Association
+	 * Encrypt/Decrypt operation for FILS connection.
+	 */
+	int (*is_drv_fils_crypto_capable)(void *priv);
+
+	/**
+	 * set_fils_aad - Set FILS AAD data to driver
+	 * @priv: Private driver interface data
+	 * @param: Auth params
+	 * Return: 0 on success, -1 on failure
+	 *
+	 * Set FILS AAD (FILS KEK, KEK length, SNonce and ANonce) and STA MAC to
+	 * driver just before sending FILS SK AUTH response.
+	 */
+	int (*set_fils_aad)(void *priv,
+			    struct wpa_driver_sta_auth_params *param);
 };
 
 /**
diff --git a/src/drivers/driver_nl80211.c b/src/drivers/driver_nl80211.c
index dfa1183..8e12722 100644
--- a/src/drivers/driver_nl80211.c
+++ b/src/drivers/driver_nl80211.c
@@ -10469,6 +10469,55 @@ fail:
 	return ret;
 }
 
+#ifdef CONFIG_FILS
+static int nl80211_set_fils_aad(void *priv,
+				struct wpa_driver_sta_auth_params *param)
+{
+	struct i802_bss *bss = priv;
+	struct wpa_driver_nl80211_data *drv = bss->drv;
+	struct nl_msg *msg;
+	int ret = -1;
+	char fils_nonces[2 * FILS_NONCE_LEN] = {};
+
+	msg = nl80211_drv_msg(drv, 0, NL80211_CMD_SET_FILS_AAD);
+	if (!msg)
+		goto fail;
+
+	wpa_printf(MSG_DEBUG, "nl80211: Set FILS AAD (ifindex=%d)",
+		   drv->ifindex);
+	if (nla_put(msg, NL80211_ATTR_MAC, ETH_ALEN, param->addr))
+		goto fail;
+	if (nla_put(msg, NL80211_ATTR_FILS_KEK, param->fils_kek_len,
+		    param->fils_kek))
+		goto fail;
+	memcpy(&fils_nonces[0], param->fils_snonce, FILS_NONCE_LEN);
+	memcpy(&fils_nonces[FILS_NONCE_LEN], param->fils_anonce, FILS_NONCE_LEN);
+	if (nla_put(msg, NL80211_ATTR_FILS_NONCES, (2 * FILS_NONCE_LEN),
+		    fils_nonces))
+		goto fail;
+
+	ret = send_and_recv_msgs(drv, msg, NULL, NULL);
+	msg = NULL;
+	if (ret)
+		wpa_dbg(drv->ctx, MSG_DEBUG,
+			"nl80211: Set FILS AAD command failed: ret=%d (%s)",
+			ret, strerror(-ret));
+
+	return ret;
+
+fail:
+	nlmsg_free(msg);
+	return ret;
+}
+
+static int nl80211_is_drv_fils_crypto_capable(void *priv)
+{
+	struct i802_bss *bss = priv;
+	struct wpa_driver_nl80211_data *drv = bss->drv;
+
+	return (drv->capa.flags & WPA_DRIVER_FLAGS_FILS_CRYPTO_OFFLOAD) ? 1 : 0;
+}
+#endif /* CONFIG_FILS */
 
 const struct wpa_driver_ops wpa_driver_nl80211_ops = {
 	.name = "nl80211",
@@ -10598,4 +10647,8 @@ const struct wpa_driver_ops wpa_driver_nl80211_ops = {
 	.get_ext_capab = nl80211_get_ext_capab,
 	.update_connect_params = nl80211_update_connection_params,
 	.send_external_auth_status = nl80211_send_external_auth_status,
+#ifdef CONFIG_FILS
+	.is_drv_fils_crypto_capable = nl80211_is_drv_fils_crypto_capable,
+	.set_fils_aad = nl80211_set_fils_aad,
+#endif /* CONFIG_FILS */
 };
diff --git a/src/drivers/driver_nl80211_capa.c b/src/drivers/driver_nl80211_capa.c
index 6b353c5..ce84e92 100644
--- a/src/drivers/driver_nl80211_capa.c
+++ b/src/drivers/driver_nl80211_capa.c
@@ -402,6 +402,9 @@ static void wiphy_info_ext_feature_flags(struct wiphy_info_data *info,
 	if (ext_feature_isset(ext_features, len,
 			      NL80211_EXT_FEATURE_FILS_SK_OFFLOAD))
 		capa->flags |= WPA_DRIVER_FLAGS_FILS_SK_OFFLOAD;
+	if (ext_feature_isset(ext_features, len,
+			      NL80211_EXT_FEATURE_FILS_CRYPTO_OFFLOAD))
+		capa->flags |= WPA_DRIVER_FLAGS_FILS_CRYPTO_OFFLOAD;
 }
 
 
diff --git a/src/drivers/nl80211_copy.h b/src/drivers/nl80211_copy.h
index 083a1d1..cd352ed 100644
--- a/src/drivers/nl80211_copy.h
+++ b/src/drivers/nl80211_copy.h
@@ -232,6 +232,29 @@
  */
 
 /**
+ * DOC: FILS shared key crypto offload
+ *
+ * This feature is applicable to Drivers running in AP mode.
+ *
+ * FILS shared key crypto offload can be advertized by drivers by setting
+ * @NL80211_EXT_FEATURE_FILS_CRYPTO_OFFLOAD flag. The drivers that support
+ * FILS shared key crypto offload should be able to encrypt or decrypt
+ * association frames for FILS shared key authentication as per IEEE 802.11ai.
+ * With this capability, for FILS key derivation, drivers depend on userspace.
+ *
+ * After FILS key derivation, userspace shares the FILS AAD details with driver
+ * and driver stores the same to use in decryption of association request and
+ * in encryption of association response. The below parameters should be given
+ * to driver in %NL80211_CMD_SET_FILS_AAD.
+ *	%NL80211_ATTR_MAC - STA MAC address, used for storing FILS AAD per STA
+ *	%NL80211_ATTR_FILS_KEK - Used for encryption or decryption
+ *	%NL80211_ATTR_FILS_NONCES - Used for encryption or decryption
+ *			(STA Nonce 16 bytes followed by AP Nonce 16 bytes)
+ *
+ * Once the association is done, the driver cleans the FILS AAD data.
+ */
+
+/**
  * enum nl80211_commands - supported nl80211 commands
  *
  * @NL80211_CMD_UNSPEC: unspecified command to catch errors
@@ -1018,6 +1041,12 @@
  *	&NL80211_ATTR_CHANNEL_WIDTH,&NL80211_ATTR_NSS attributes with its
  *	address(specified in &NL80211_ATTR_MAC).
  *
+ * @NL80211_CMD_SET_FILS_AAD: Set FILS AAD data to the driver using -
+ *	&NL80211_ATTR_MAC - for STA MAC address
+ *	&NL80211_ATTR_FILS_KEK - for KEK
+ *	&NL80211_ATTR_FILS_NONCES - for FILS Nonces
+ *		(STA Nonce 16 bytes followed by AP Nonce 16 bytes)
+ *
  * @NL80211_CMD_MAX: highest used command number
  * @__NL80211_CMD_AFTER_LAST: internal use
  */
@@ -1228,6 +1257,10 @@ enum nl80211_commands {
 
 	NL80211_CMD_STA_OPMODE_CHANGED,
 
+	NL80211_CMD_CONTROL_PORT_FRAME,
+
+	NL80211_CMD_SET_FILS_AAD,
+
 	/* add new commands above here */
 
 	/* used to define NL80211_CMD_MAX below */
@@ -4996,6 +5029,28 @@ enum nl80211_feature_flags {
  * @NL80211_EXT_FEATURE_LOW_SPAN_SCAN: Driver supports low span scan.
  * @NL80211_EXT_FEATURE_LOW_POWER_SCAN: Driver supports low power scan.
  * @NL80211_EXT_FEATURE_HIGH_ACCURACY_SCAN: Driver supports high accuracy scan.
+ * @NL80211_EXT_FEATURE_DFS_OFFLOAD: HW/driver will offload DFS actions.
+ *	Device or driver will do all DFS-related actions by itself,
+ *	informing user-space about CAC progress, radar detection event,
+ *	channel change triggered by radar detection event.
+ *	No need to start CAC from user-space, no need to react to
+ *	"radar detected" event.
+ * @NL80211_EXT_FEATURE_CONTROL_PORT_OVER_NL80211: Driver supports sending and
+ *	receiving control port frames over nl80211 instead of the netdevice.
+ * @NL80211_EXT_FEATURE_DATA_ACK_SIGNAL_SUPPORT: This Driver support data ack
+ *	rssi if firmware support, this flag is to intimate about ack rssi
+ *	support to nl80211.
+ * @NL80211_EXT_FEATURE_TXQS: Driver supports FQ-CoDel-enabled intermediate
+ *      TXQs.
+ * @NL80211_EXT_FEATURE_SCAN_RANDOM_SN: Driver/device supports randomizing the
+ *	SN in probe request frames if requested by %NL80211_SCAN_FLAG_RANDOM_SN.
+ * @NL80211_EXT_FEATURE_SCAN_MIN_PREQ_CONTENT: Driver/device can omit all data
+ *	except for supported rates from the probe request content if requested
+ *	by the %NL80211_SCAN_FLAG_MIN_PREQ_CONTENT flag.
+ * @NL80211_EXT_FEATURE_FILS_CRYPTO_OFFLOAD: Driver running in AP mode supports
+ *	FILS encryption/decryption for (Re)Association Request/Response frames.
+ *	Userspace has to share FILS AAD details to the driver by using
+ *	@NL80211_CMD_SET_FILS_AAD.
  *
  * @NUM_NL80211_EXT_FEATURES: number of extended features.
  * @MAX_NL80211_EXT_FEATURES: highest extended feature index.
@@ -5026,6 +5081,13 @@ enum nl80211_ext_feature_index {
 	NL80211_EXT_FEATURE_LOW_SPAN_SCAN,
 	NL80211_EXT_FEATURE_LOW_POWER_SCAN,
 	NL80211_EXT_FEATURE_HIGH_ACCURACY_SCAN,
+	NL80211_EXT_FEATURE_DFS_OFFLOAD,
+	NL80211_EXT_FEATURE_CONTROL_PORT_OVER_NL80211,
+	NL80211_EXT_FEATURE_DATA_ACK_SIGNAL_SUPPORT,
+	NL80211_EXT_FEATURE_TXQS,
+	NL80211_EXT_FEATURE_SCAN_RANDOM_SN,
+	NL80211_EXT_FEATURE_SCAN_MIN_PREQ_CONTENT,
+	NL80211_EXT_FEATURE_FILS_CRYPTO_OFFLOAD,
 
 	/* add new features before the definition below */
 	NUM_NL80211_EXT_FEATURES,
-- 
1.9.1

